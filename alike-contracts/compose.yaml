version: '3.8'

services:
  # Main backend service with TEE support
  alike-backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    image: alike-wellness:${TAG:-latest}
    environment:
      - NODE_ENV=production
      - OASIS_SAPPHIRE_RPC=${OASIS_RPC_URL:-https://sapphire.oasis.io}
      - OASIS_CHAIN_ID=${CHAIN_ID:-23294}
      - CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://mongo:27017/alike
      - JWT_SECRET=${JWT_SECRET}
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
    volumes:
      - session-data:/data
      - ./contracts:/app/contracts:ro
      - ./keys:/app/keys:ro
    ports:
      - "${API_PORT:-8545}:8545"  # RPC endpoint
      - "${WS_PORT:-8546}:8546"   # WebSocket endpoint
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      prometheus:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: ${API_REPLICAS:-2}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
    networks:
      - alike-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - alike-network

  # MongoDB for persistent storage
  mongo:
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS:-secret}
    volumes:
      - mongo-data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${MONGO_PORT:-27017}:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - alike-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - alike-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.0.0
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    networks:
      - alike-network

  # Nginx for SSL termination and reverse proxy
  nginx:
    image: nginx:1.25-alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/www:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - alike-backend
    networks:
      - alike-network

volumes:
  session-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/sessions
      o: bind
  redis-data:
    driver: local
  mongo-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  alike-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
